From 68768ee3696f0955ee4a691f5fad88a5534cc196 Mon Sep 17 00:00:00 2001
From: zd <arley.ge@foxmail.com>
Date: Tue, 10 Jun 2025 16:41:47 +0800
Subject: [PATCH 2/3] arley debug mipi0 ov9734 oh01a10

---
 .../dts/rockchip/rk3588-evb7-v11-linux.dts    |    2 +-
 .../dts/rockchip/rk3588-evb7-v11-ov9734.dtsi  |  193 ++
 drivers/media/i2c/Makefile                    |    1 +
 drivers/media/i2c/ov9734.c                    | 1666 +++++++++++++++++
 4 files changed, 1861 insertions(+), 1 deletion(-)
 create mode 100755 arch/arm64/boot/dts/rockchip/rk3588-evb7-v11-ov9734.dtsi
 create mode 100755 drivers/media/i2c/ov9734.c

diff --git a/arch/arm64/boot/dts/rockchip/rk3588-evb7-v11-linux.dts b/arch/arm64/boot/dts/rockchip/rk3588-evb7-v11-linux.dts
index 49439ac2e59b..3de93647926c 100644
--- a/arch/arm64/boot/dts/rockchip/rk3588-evb7-v11-linux.dts
+++ b/arch/arm64/boot/dts/rockchip/rk3588-evb7-v11-linux.dts
@@ -10,7 +10,7 @@
 //#include "rk3588-evb7-v11-imx415.dtsi"
 //#include "rk3588-cvbs-gm7150-bt656.dtsi"
 //#include "rk3588-cvbs-ov426-bt656.dtsi"
-//#include "rk3588-evb7-v11-ov9734.dtsi"
+#include "rk3588-evb7-v11-ov9734.dtsi"
 #include "zd-g1548fh131gg-1920-1080-mipi.dtsi"
 #include "rk3588-linux.dtsi"
 
diff --git a/arch/arm64/boot/dts/rockchip/rk3588-evb7-v11-ov9734.dtsi b/arch/arm64/boot/dts/rockchip/rk3588-evb7-v11-ov9734.dtsi
new file mode 100755
index 000000000000..c2ebc95f7e22
--- /dev/null
+++ b/arch/arm64/boot/dts/rockchip/rk3588-evb7-v11-ov9734.dtsi
@@ -0,0 +1,193 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+/*
+ * Copyright (c) 2021 Rockchip Electronics Co., Ltd.
+ *
+ */
+
+/ {
+	
+	//红外滤光片（IRCUT）由两根线控制，对这两根线施加3.5v~6v的电源，通过对IRCUT供电电源的正负极对调，且满足通电时间100ms±10%，能够实现IRCUT的切换。驱动通过两个gpio控制电机驱动器的电流输出方向，gpio命令为open（红线）、close（黑线）。电流由open流向close，为红外截止滤光片，白天工作状态；电流由close流向open，为白玻璃片，夜晚工作状态。其配置如下：
+	cam_ircut0: cam_ircut {
+		status = "okay";
+		compatible = "rockchip,ircut";
+		//ircut-open-gpios = <&gpio3 RK_PC1 GPIO_ACTIVE_HIGH>;
+		//ircut-close-gpios  = <&gpio3 RK_PC0 GPIO_ACTIVE_HIGH>;
+		rockchip,camera-module-index = <0>;
+		rockchip,camera-module-facing = "back";
+	};
+};
+
+//这里使用的是csi2_dcphy0
+&csi2_dcphy0 {
+	status = "okay";
+
+	ports {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		port@0 {
+			reg = <0>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			mipi_in_ucam0: endpoint@1 {
+				reg = <1>;
+				//sensor端的port名
+				remote-endpoint = <&ov9734_out0>;
+				//mipi lane数，1lane为<1>,4lane为<1 2 3 4>，这里配置的是4lane，这个必须要配置否则会无法识别mipi类型
+				data-lanes = <1>;
+			};
+		};
+		port@1 {
+			reg = <1>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			csidcphy0_out: endpoint@0 {
+				reg = <0>;
+				//mipi0_csi2_input是对应的isp端的port名
+				remote-endpoint = <&mipi0_csi2_input>;
+			};
+		};
+	};
+};
+
+&i2c7 {
+	status = "okay";
+	clock-frequency = <400000>;
+    pinctrl-names = "default";
+	pinctrl-0 = <&i2c7m0_xfer>;	
+	
+
+	ov9734: ov9734@36 {
+		compatible = "ovti,ov9734";		//需要与驱动定义的字符串一致
+		reg = <0x36>;		//sensor的I2C设备地址，7位
+		status = "okay";
+		
+		clocks = <&cru CLK_MIPI_CAMARAOUT_M2>;//sensor clockin配置
+		clock-names = "xvclk";
+		pinctrl-names = "default";
+		pinctrl-0 = <&mipim0_camera2_clk>;
+		//电源配置
+		power-domains = <&power RK3588_PD_VI>;
+		
+		//power管脚配置
+		//pwdn-gpios = <&gpio1 RK_PA0 GPIO_ACTIVE_HIGH>;	
+		//reset-gpios = <&gpio1 RK_PB0 GPIO_ACTIVE_HIGH>;		
+		//avdd-supply = <&vcc_mipidcphy0>;
+		//dovdd-supply = <&vcc_mipidcphy0_dovdd>;
+		
+		//模组编号，该编号不要重复
+		rockchip,camera-module-index = <1>;
+		//模组朝向，有前摄“front”、后摄“back”
+		rockchip,camera-module-facing = "back";
+		//模组名称
+		rockchip,camera-module-name = "Sigma9734";
+		//IR CUT设备
+		rockchip,camera-module-lens-name = "ov9734";
+
+		//rockchip,camera-module-index-oh01a10 = <2>;
+		rockchip,camera-module-facing-oh01a10 = "back";
+		rockchip,camera-module-name-oh01a10 = "Nkjoh01a10";
+		rockchip,camera-module-lens-name-oh01a10 = "oh01a10";
+		
+		//lens-focus = <&cam_ircut0>;
+		port {
+			ov9734_out0: endpoint {
+			//mipi dphy端的port名
+				remote-endpoint = <&mipi_in_ucam0>;
+				//mipi lane数，1lane为<1>,4lane为<1 2 3 4>，这里配置的是4lane，这个必须要配置否则会无法识别mipi类型
+				data-lanes = <1>;
+			};
+		};
+	};
+};
+
+&mipi_dcphy0 {
+	status = "okay";
+};
+
+&mipi0_csi2 {
+	status = "okay";
+
+	ports {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		port@0 {
+			reg = <0>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			mipi0_csi2_input: endpoint@1 {
+				reg = <1>;
+				//csi2 dphy端的port名
+				remote-endpoint = <&csidcphy0_out>;
+			};
+		};
+
+		port@1 {
+			reg = <1>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			mipi0_csi2_output: endpoint@0 {
+				reg = <0>;
+				//vicap端的port名
+				remote-endpoint = <&cif_mipi_in0>;
+			};
+		};
+	};
+};
+//vicap的配置，这里用rkcif节点代表vicap
+&rkcif {
+	status = "okay";
+};
+
+&rkcif_mipi_lvds {
+	status = "okay";
+
+	port {
+		cif_mipi_in0: endpoint {
+		//csi2 host端的port名
+			remote-endpoint = <&mipi0_csi2_output>;
+		};
+	};
+};
+
+&rkcif_mipi_lvds_sditf {
+	status = "okay";
+
+	port {
+		mipi_lvds_sditf: endpoint {
+		//isp虚拟设备端port名
+			remote-endpoint = <&isp0_vir0>;
+		};
+	};
+};
+
+&rkcif_mmu {
+	status = "okay";
+};
+
+&rkisp0 {
+	status = "okay";
+};
+
+&isp0_mmu {
+	status = "okay";
+};
+
+&rkisp0_vir0 {
+	status = "okay";
+
+	port {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		isp0_vir0: endpoint@0 {
+			reg = <0>;
+			//vicap mipi sditf的端点名
+			remote-endpoint = <&mipi_lvds_sditf>;
+		};
+	};
+};
diff --git a/drivers/media/i2c/Makefile b/drivers/media/i2c/Makefile
index 6e7484ac1a3b..9e06282f6c6f 100644
--- a/drivers/media/i2c/Makefile
+++ b/drivers/media/i2c/Makefile
@@ -276,3 +276,4 @@ obj-$(CONFIG_VIDEO_PREISP_DUMMY_SENSOR) += preisp-dummy.o
 obj-$(CONFIG_VIDEO_ROCKCHIP_THUNDER_BOOT_SETUP)	+= cam-tb-setup.o
 obj-$(CONFIG_VIDEO_CAM_SLEEP_WAKEUP)	+= cam-sleep-wakeup.o
 obj-$(CONFIG_VIDEO_LIGHT_CTL)	+= light_ctl.o
+obj-y	+= ov9734.o
\ No newline at end of file
diff --git a/drivers/media/i2c/ov9734.c b/drivers/media/i2c/ov9734.c
new file mode 100755
index 000000000000..c3dcee11f66b
--- /dev/null
+++ b/drivers/media/i2c/ov9734.c
@@ -0,0 +1,1666 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * ov9734 driver
+ *
+ * Copyright (C) 2020 Rockchip Electronics Co., Ltd.
+ *
+ * V0.0X01.0X00 first version
+ */
+
+#define DEBUG
+#include <linux/clk.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/pm_runtime.h>
+#include <linux/regulator/consumer.h>
+#include <linux/sysfs.h>
+#include <linux/slab.h>
+#include <linux/version.h>
+#include <linux/rk-camera-module.h>
+#include <media/media-entity.h>
+#include <media/v4l2-async.h>
+#include <media/v4l2-ctrls.h>
+#include <media/v4l2-subdev.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/rk-preisp.h>
+
+#define DRIVER_VERSION			KERNEL_VERSION(0, 0x01, 0x05)
+
+#ifndef V4L2_CID_DIGITAL_GAIN
+#define V4L2_CID_DIGITAL_GAIN		V4L2_CID_GAIN
+#endif
+
+#define MIPI_FREQ_180M			180000000
+/* ov9734 only support 1-lane mipi output */
+#define OV9734_4LANES			1
+#define OV9734_PIXEL_RATE		(49 * 1000 * 1000)
+#define OV9734_XVCLK_FREQ		24000000
+//#define OV9734_XVCLK_FREQ		12000000
+#define OF_CAMERA_HDR_MODE		"rockchip,camera-hdr-mode"
+
+
+/* TODO: Get the real chip id from reg */
+#define OV9734_CHIP_ID			0x9734
+#define OH01A10_CHIP_ID			0x5601
+#define OV9734_REG_CHIP_ID		0x300a
+
+#define OV9734_REG_CTRL_MODE		0x0100
+#define OV9734_MODE_SW_STANDBY		0x00
+#define OV9734_MODE_STREAMING		BIT(0)
+
+/* Analog gain controls from sensor */
+#define OV9734_REG_ANALOG_GAIN		0x350a
+#define OH01A10_REG_ANALOG_GAIN		0x3508
+
+#define OV9734_ANAL_GAIN_MIN		16
+#define OV9734_ANAL_GAIN_MAX		248
+#define OV9734_ANAL_GAIN_STEP		1
+
+/* Exposure controls from sensor */
+#define OV9734_REG_EXPOSURE		0x3500
+#define OV9734_EXPOSURE_MIN		4
+#define OV9734_EXPOSURE_MAX_MARGIN	4
+#define	OV9734_EXPOSURE_STEP		1
+
+/* vertical-timings from sensor */
+#define OV9734_REG_VTS			0x380e
+#define OV9734_VTS		0x032a
+
+#define OV9734_VTS_MIN	0x032a
+#define OV9734_VTS_MAX			0x7fff
+
+/* horizontal-timings from sensor */
+#define OV9734_REG_HTS			0x380c
+#define OV9734_HTS		0x05c6
+
+/* Test Pattern Control */
+#define OV9734_REG_TEST_PATTERN		0x5080
+#define OV9734_TEST_PATTERN_ENABLE	BIT(7)
+#define OV9734_TEST_PATTERN_BAR_SHIFT	2
+#define	OV9734_TEST_PATTERN_DISABLE	0x0
+
+/* Group Access */
+#define OV9734_REG_GROUP_ACCESS		0x3208
+#define OV9734_GROUP_HOLD_START		0x0
+#define OV9734_GROUP_HOLD_END		0x10
+#define OV9734_GROUP_HOLD_LAUNCH	0xa0
+
+#define REG_NULL			0xFFFF
+#define OV9734_REG_VALUE_08BIT		1
+#define OV9734_REG_VALUE_16BIT		2
+#define OV9734_REG_VALUE_24BIT		3
+
+#define I2C_M_WR			0
+#define I2C_MSG_MAX			300
+#define I2C_DATA_MAX			(I2C_MSG_MAX * 3)
+
+#define OF_CAMERA_PINCTRL_STATE_DEFAULT	"rockchip,camera_default"
+
+#define OV9734_NAME			"ov9734"
+#define OH01A10_NAME			"oh01a10"
+#define OV9734_LANES			1
+
+#define OV9734_PIX_FORMAT			MEDIA_BUS_FMT_SBGGR10_1X10	//MEDIA_BUS_FMT_SRGGB10_1X10 红屏	//MEDIA_BUS_FMT_SBGGR10_1X10 红变蓝	//MEDIA_BUS_FMT_SGRBG10_1X10 绿屏	
+#define OH01A10_PIX_FORMAT			MEDIA_BUS_FMT_SBGGR10_1X10	//MEDIA_BUS_FMT_SRGGB10_1X10 红屏	//MEDIA_BUS_FMT_SBGGR10_1X10 红变蓝	//MEDIA_BUS_FMT_SGRBG10_1X10 绿屏
+
+#define RKMODULE_CAMERA_MODULE_INDEX_OH01A10	"rockchip,camera-module-index-oh01a10"
+#define RKMODULE_CAMERA_MODULE_FACING_OH01A10	"rockchip,camera-module-facing-oh01a10"
+#define RKMODULE_CAMERA_MODULE_NAME_OH01A10		"rockchip,camera-module-name-oh01a10"
+#define RKMODULE_CAMERA_LENS_NAME_OH01A10		"rockchip,camera-module-lens-name-oh01a10"
+
+#define OV9734_PM_RUNTIME	1
+
+
+static u32 camera_id = 0;
+
+
+struct regval {
+	u16 addr;
+	u8 val;
+};
+
+struct ov9734_mode {
+	//u32 bus_fmt;
+	u32 width;
+	u32 height;
+	struct v4l2_fract max_fps;
+	u32 hts_def;
+	u32 vts_def;
+	u32 exp_def;
+	//const struct regval *reg_list;
+};
+
+struct ov9734 {
+	struct i2c_client	*client;
+	struct clk		*xvclk;
+
+	struct pinctrl		*pinctrl;
+	struct pinctrl_state	*pins_default;
+
+	struct v4l2_subdev	subdev;
+	struct media_pad	pad;
+	struct v4l2_ctrl_handler ctrl_handler;
+	struct v4l2_ctrl	*exposure;
+	struct v4l2_ctrl	*anal_gain;
+	struct v4l2_ctrl	*digi_gain;
+	struct v4l2_ctrl	*hblank;
+	struct v4l2_ctrl	*vblank;
+	struct v4l2_ctrl	*test_pattern;
+	struct mutex		mutex;
+	bool			streaming;
+	bool			power_on;
+	const struct ov9734_mode *cur_mode;
+	u32			module_index;
+	const char		*module_facing;
+	const char		*module_name;
+	const char		*len_name;
+	struct v4l2_fract	cur_fps;
+	u32			cur_vts;
+};
+
+#define to_ov9734(sd) container_of(sd, struct ov9734, subdev)
+
+
+static const struct regval hs_ov9734_1280x720_regs[] = {
+	{0x0103, 0x01},
+	{0x0100, 0x00},
+	{0x3001, 0x00},
+	{0x3002, 0x00},
+	{0x3007, 0x00},
+	{0x3009, 0x60},
+	{0x3010, 0x00},
+	{0x3011, 0x08},
+	{0x3014, 0x22},
+	{0x301e, 0x15},
+	{0x3030, 0x19},
+	{0x3080, 0x02},
+	{0x3081, 0x3c},
+	{0x3082, 0x04},
+	{0x3083, 0x00},
+	{0x3084, 0x02},
+	{0x3085, 0x01},
+	{0x3086, 0x01},
+	{0x3089, 0x01},
+	{0x308a, 0x00},
+	{0x3103, 0x01},
+	{0x3600, 0x55},
+	{0x3601, 0x02},
+	{0x3605, 0x22},
+	{0x3611, 0xe7},
+	{0x3654, 0x10},
+	{0x3655, 0x77},
+	{0x3656, 0x77},
+	{0x3657, 0x07},
+	{0x3658, 0x22},
+	{0x3659, 0x22},
+	{0x365a, 0x02},
+	{0x3784, 0x05},
+	{0x3785, 0x55},
+	{0x37c0, 0x07},
+	{0x3800, 0x00},
+	{0x3801, 0x04},
+	{0x3802, 0x00},
+	{0x3803, 0x04},
+	{0x3804, 0x05},
+	{0x3805, 0x0b},
+	{0x3806, 0x02},
+	{0x3807, 0xdb},
+	{0x3808, 0x05},
+	{0x3809, 0x00},
+	{0x380a, 0x02},
+	{0x380b, 0xd0},
+	{0x380c, 0x05},
+	{0x380d, 0xc6},
+	{0x380e, 0x03},
+	{0x380f, 0x2a},
+	{0x3810, 0x00},
+	{0x3811, 0x04},
+	{0x3812, 0x00},
+	{0x3813, 0x04},
+	{0x3816, 0x00},
+	{0x3817, 0x00},
+	{0x3818, 0x00},
+	{0x3819, 0x04},
+	{0x3820, 0x18},
+	{0x3821, 0x00},
+	{0x382c, 0x06},
+	{0x3500, 0x00},
+	{0x3501, 0x31},
+	{0x3502, 0x00},
+	{0x3503, 0x03},
+	{0x3504, 0x00},
+	{0x3505, 0x00},
+	{0x3509, 0x10},
+	{0x350a, 0x00},
+	{0x350b, 0x40},
+	{0x3d00, 0x00},
+	{0x3d01, 0x00},
+	{0x3d02, 0x00},
+	{0x3d03, 0x00},
+	{0x3d04, 0x00},
+	{0x3d05, 0x00},
+	{0x3d06, 0x00},
+	{0x3d07, 0x00},
+	{0x3d08, 0x00},
+	{0x3d09, 0x00},
+	{0x3d0a, 0x00},
+	{0x3d0b, 0x00},
+	{0x3d0c, 0x00},
+	{0x3d0d, 0x00},
+	{0x3d0e, 0x00},
+	{0x3d0f, 0x00},
+	{0x3d80, 0x00},
+	{0x3d81, 0x00},
+	{0x3d82, 0x38},
+	{0x3d83, 0xa4},
+	{0x3d84, 0x00},
+	{0x3d85, 0x00},
+	{0x3d86, 0x1f},
+	{0x3d87, 0x03},
+	{0x3d8b, 0x00},
+	{0x3d8f, 0x00},
+	{0x4001, 0xe0},
+	{0x4009, 0x0b},
+	{0x4300, 0x03},
+	{0x4301, 0xff},
+	{0x4304, 0x00},
+	{0x4305, 0x00},
+	{0x4309, 0x00},
+	{0x4600, 0x00},
+	{0x4601, 0x80},
+	{0x4800, 0x00},
+	{0x4805, 0x00},
+	{0x4821, 0x50},
+	{0x4823, 0x50},
+	{0x4837, 0x2d},
+	{0x4a00, 0x00},
+	{0x4f00, 0x80},
+	{0x4f01, 0x10},
+	{0x4f02, 0x00},
+	{0x4f03, 0x00},
+	{0x4f04, 0x00},
+	{0x4f05, 0x00},
+	{0x4f06, 0x00},
+	{0x4f07, 0x00},
+	{0x4f08, 0x00},
+	{0x4f09, 0x00},
+	{0x5000, 0x2f},
+	{0x500c, 0x00},
+	{0x500d, 0x00},
+	{0x500e, 0x00},
+	{0x500f, 0x00},
+	{0x5010, 0x00},
+	{0x5011, 0x00},
+	{0x5012, 0x00},
+	{0x5013, 0x00},
+	{0x5014, 0x00},
+	{0x5015, 0x00},
+	{0x5016, 0x00},
+	{0x5017, 0x00},
+	{0x5080, 0x00},
+	{0x5180, 0x01},
+	{0x5181, 0x00},
+	{0x5182, 0x01},
+	{0x5183, 0x00},
+	{0x5184, 0x01},
+	{0x5185, 0x00},
+	{0x5708, 0x06},
+	{0x380f, 0x2a},//;22;30fps
+	{0x5780, 0x3e},	//;DPC
+	{0x5781, 0x0f},
+	{0x5782, 0x44},
+	{0x5783, 0x02},
+	{0x5784, 0x01},
+	{0x5785, 0x01},
+	{0x5786, 0x00},
+	{0x5787, 0x04},
+	{0x5788, 0x02},
+	{0x5789, 0x0f},
+	{0x578a, 0xfd},
+	{0x578b, 0xf5},
+	{0x578c, 0xf5},
+	{0x578d, 0x03},
+	{0x578e, 0x08},
+	{0x578f, 0x0c},
+	{0x5790, 0x08},
+	{0x5791, 0x04},
+	{0x5792, 0x00},
+	{0x5793, 0x52},
+	{0x5794, 0xa3},
+	{0x5000, 0x3f},//;MWB
+#if 0
+	{0x0100, 0x00},	//; //;@@ 0 4 Res_1288x728_FULL_30FPS //;RUN Res_1280x720_FULL_30FPS //;For PantherM //99 1288 728 //;Res_1288x728
+	{0x3801, 0x00},//;04
+	{0x3803, 0x00},//;04
+	{0x3805, 0x0f},//;0b
+	{0x3807, 0xdf},//;db
+	{0x3809, 0x08},//;00
+	{0x380b, 0xd8},//;d0
+	{0x3811, 0x04},
+	{0x3813, 0x04},
+	{0x0100, 0x01},
+#endif
+	{REG_NULL, 0x00},	
+};
+
+//static const struct regval oh01a10_1280x720_regs[] = {
+static struct regval oh01a10_1280x720_regs[] = {
+	{0x0100, 0x00},
+	{0x0103, 0x01},
+	{0x0302, 0x00},
+	{0x0303, 0x06},
+	{0x0304, 0x01},
+	{0x0305, 0x90},
+	{0x0306, 0x00},
+	{0x0308, 0x01},
+	{0x0309, 0x00},
+	{0x030c, 0x01},
+	{0x0322, 0x01},
+	{0x0323, 0x06},
+	{0x0324, 0x01},
+	{0x0325, 0x68},
+	{0x3002, 0xa1},
+	{0x301e, 0xf0},
+	{0x3022, 0x01},
+	{0x3501, 0x03},
+	{0x3502, 0x78},
+	{0x3504, 0x0c},
+	{0x3508, 0x01},
+	{0x3509, 0x00},
+	{0x350a, 0x01},		//{0x350a, 0x01},
+	{0x350b, 0x00},		//{0x350b, 0x00},
+	{0x350c, 0x00},		//{0x350c, 0x00},	
+	{0x3601, 0xc0},
+	{0x3603, 0x71},
+	{0x3610, 0x68},
+	{0x3611, 0x86},
+	{0x3640, 0x10},
+	{0x3641, 0x80},
+	{0x3642, 0xdc},
+	{0x3646, 0x55},
+	{0x3647, 0x57},
+	{0x364b, 0x00},
+	{0x3653, 0x10},
+	{0x3655, 0x00},
+	{0x3656, 0x00},
+	{0x365f, 0x0f},
+	{0x3661, 0x45},
+	{0x3662, 0x24},
+	{0x3663, 0x11},
+	{0x3664, 0x07},
+	{0x3709, 0x34},
+	{0x370b, 0x6f},
+	{0x3714, 0x22},
+	{0x371b, 0x27},
+	{0x371c, 0x67},
+	{0x371d, 0xa7},
+	{0x371e, 0xe7},
+	{0x3730, 0x81},
+	{0x3733, 0x10},
+	{0x3734, 0x40},
+	{0x3737, 0x04},
+	{0x3739, 0x1c},
+	{0x3767, 0x00},
+	{0x376c, 0x81},
+	{0x3772, 0x14},
+	{0x37c2, 0x04},
+	{0x37d8, 0x03},
+	{0x37d9, 0x0c},
+	{0x37e0, 0x00},
+	{0x37e1, 0x08},
+	{0x37e2, 0x10},
+	{0x37e3, 0x04},
+	{0x37e4, 0x04},
+	{0x37e5, 0x03},
+	{0x37e6, 0x04},
+	{0x3800, 0x00},
+	{0x3801, 0x00},
+	{0x3802, 0x00},
+	{0x3803, 0x28},
+	{0x3804, 0x05},
+	{0x3805, 0x0f},
+	{0x3806, 0x03},
+	{0x3807, 0x07},
+	{0x3808, 0x05},
+	{0x3809, 0x00},
+	{0x380a, 0x02},
+	{0x380b, 0xd0},
+	{0x380c, 0x06},//{0x380c, 0x06}, 	//nkj {0x380c, 0x02}
+	{0x380d, 0x6e},//{0x380d, 0x6e},	//nkj {0x380d, 0xe8}
+	{0x380e, 0x03},
+	{0x380f, 0x2a},//{0x380f, 0x2a},	//nkj {0x380f, 0x80}
+	{0x3810, 0x00},
+	{0x3811, 0x09},
+	{0x3812, 0x00},
+	{0x3813, 0x08},
+	{0x3814, 0x01},
+	{0x3815, 0x01},
+	{0x3816, 0x01},
+	{0x3817, 0x01},
+	{0x3820, 0xa8},
+	{0x3822, 0x13},
+	{0x3832, 0x28},
+	{0x3833, 0x10},
+	{0x3b00, 0x00},
+	{0x3c80, 0x00},
+	{0x3c88, 0x02},
+	{0x3c8c, 0x07},
+	{0x3c8d, 0x40},
+	{0x3cc7, 0x80},
+	{0x4000, 0xc3},
+	{0x4001, 0xe0},
+	{0x4003, 0x40},
+	{0x4008, 0x02},
+	{0x4009, 0x19},
+	{0x400a, 0x01},
+	{0x400b, 0x6c},
+	{0x4011, 0x00},
+	{0x4041, 0x00},
+	{0x4300, 0xff},
+	{0x4301, 0x00},
+	{0x4302, 0x0f},
+	{0x4503, 0x00},
+	{0x4601, 0x50},
+	{0x4800, 0x64},
+	{0x481f, 0x34},
+	{0x4825, 0x33},
+	{0x4837, 0x14},
+	{0x4881, 0x40},
+	{0x4883, 0x01},
+	{0x4885, 0x20}, //修改驱动能力
+	{0x4890, 0x00},
+	{0x4901, 0x00},
+	{0x4902, 0x00},
+	{0x4b00, 0x2a},
+	{0x4b0d, 0x00},
+	{0x450a, 0x04},
+	{0x450b, 0x00},
+	{0x5000, 0x75},
+	{0x5004, 0x00},
+	{0x5080, 0x40},
+	{0x4800, 0x64},
+	{0x4837, 0x14},
+	{0x0100, 0x01},
+	{0x0100, 0x01},
+	{0x0100, 0x01},
+	{0x0100, 0x01},
+	{REG_NULL, 0x00},
+};
+/*
+ * The width and height must be configured to be
+ * the same as the current output resolution of the sensor.
+ * The input width of the isp needs to be 16 aligned.
+ * The input height of the isp needs to be 8 aligned.
+ * If the width or height does not meet the alignment rules,
+ * you can configure the cropping parameters with the following function to
+ * crop out the appropriate resolution.
+ * struct v4l2_subdev_pad_ops {
+ *	.get_selection
+ * }
+ */
+
+static const struct ov9734_mode supported_modes[] = {
+	{
+		/* 1H period = 7.4us */
+		//.bus_fmt = OV9734_PIX_FORMAT,
+		.width = 1280,
+		.height = 720,
+		.max_fps = {
+			.numerator = 10000,
+			.denominator = 150000,
+			//.denominator = 600000,
+		},
+		.exp_def = OV9734_VTS - 0x09,
+		.hts_def = OV9734_HTS,
+		.vts_def = OV9734_VTS,
+		//.reg_list = hs_ov9734_1280x720_regs,
+		/* 1H period = 7.4us */
+		//.bus_fmt = OV9734_PIX_FORMAT,
+		},
+};
+
+
+#if 0
+static const u32 bus_code[] = {
+	MEDIA_BUS_FMT_SBGGR10_1X10,
+};
+#endif
+
+static const s64 link_freq_items[] = {
+	MIPI_FREQ_180M,
+};
+
+static const char * const ov9734_test_pattern_menu[] = {
+	"Disabled",
+	"Vertical Color Bar Type 1",
+	"Vertical Color Bar Type 2",
+	"Vertical Color Bar Type 3",
+	"Vertical Color Bar Type 4"
+};
+
+
+/* Write registers up to 4 at a time */
+static int ov9734_write_reg(struct i2c_client *client, u16 reg, int len, u32 val)
+{
+	u32 buf_i, val_i;
+	u8 buf[6];
+	u8 *val_p;
+	__be32 val_be;
+
+	if (len > 4)
+		return -EINVAL;
+
+	buf[0] = reg >> 8;
+	buf[1] = reg & 0xff;
+
+	val_be = cpu_to_be32(val);
+	val_p = (u8 *)&val_be;
+	buf_i = 2;
+	val_i = 4 - len;
+
+	while (val_i < 4)
+		buf[buf_i++] = val_p[val_i++];
+	
+	//printk("arley_ov9734 write reg = 0x%04x, value = 0x%04x\n", reg, val);
+	if (i2c_master_send(client, buf, len + 2) != len + 2){
+		printk("arley_ov9734 i2c_master_send error\n");
+		return -EIO;
+	}
+
+	return 0;
+}
+#if 0
+static int ov9734_write_array(struct i2c_client *client,
+			      const struct regval *regs)
+{
+	u32 i;
+	int ret = 0;
+
+	for (i = 0; ret == 0 && regs[i].addr != REG_NULL; i++) {
+		ret = ov9734_write_reg(client, regs[i].addr,
+				       OV9734_REG_VALUE_08BIT, regs[i].val);
+	}
+	return ret;
+}
+#else
+static int ov9734_write_array(struct i2c_client *client,
+			      const struct regval *regs)
+{
+	u8 *data;
+	u32 i, j = 0, k = 0;
+	int ret = 0;
+	struct i2c_msg *msg;
+	printk("arley_ov9734 ov9734_write_array start\n");
+	msg = kmalloc((sizeof(struct i2c_msg) * I2C_MSG_MAX),
+		GFP_KERNEL);
+	if (!msg)
+		return -ENOMEM;
+
+	data = kmalloc((sizeof(unsigned char) * I2C_DATA_MAX),
+		GFP_KERNEL);
+	if (!data) {
+		kfree(msg);
+		return -ENOMEM;
+	}
+
+	for (i = 0; regs[i].addr != REG_NULL; i++) {
+		(msg + j)->addr = client->addr;
+		(msg + j)->flags = I2C_M_WR;
+		(msg + j)->buf = (data + k);
+
+		data[k + 0] = (u8)(regs[i].addr >> 8);
+		data[k + 1] = (u8)(regs[i].addr & 0xFF);
+		data[k + 2] = (u8)(regs[i].val & 0xFF);
+		printk("arley_ov9734 ov9734_write_array: 0x%04X, value: 0x%04X\n",regs[i].addr, regs[i].val);
+		k = k + 3;
+		(msg + j)->len = 3;
+
+		if (j++ == (I2C_MSG_MAX - 1)) {
+			ret = i2c_transfer(client->adapter, msg, j);
+			if (ret < 0) {
+				printk("arley_ov9734 ov9734_write_array i2c_transfer 01 error\n");
+				kfree(msg);
+				kfree(data);
+				return ret;
+			}
+
+			j = 0;
+			k = 0;
+		}
+	}
+
+	if (j != 0) {
+		ret = i2c_transfer(client->adapter, msg, j);
+		if (ret < 0) {
+			printk("arley_ov9734 ov9734_write_array i2c_transfer 02 error\n");
+			kfree(msg);
+			kfree(data);
+			return ret;
+		}
+	}
+	kfree(msg);
+	kfree(data);
+	printk("arley_ov9734 ov9734_write_array end\n");
+	return 0;
+}
+#endif
+/* Read registers up to 4 at a time */
+static int ov9734_read_reg(struct i2c_client *client, u16 reg, unsigned int len, u32 *val)
+{
+	struct i2c_msg msgs[2];
+	u8 *data_be_p;
+	__be32 data_be = 0;
+	__be16 reg_addr_be = cpu_to_be16(reg);
+	int ret;
+
+	if (len > 4 || !len)
+		return -EINVAL;
+
+	data_be_p = (u8 *)&data_be;
+	/* Write register address */
+	msgs[0].addr = client->addr;
+	msgs[0].flags = 0;
+	msgs[0].len = 2;
+	msgs[0].buf = (u8 *)&reg_addr_be;
+
+	/* Read data from register */
+	msgs[1].addr = client->addr;
+	msgs[1].flags = I2C_M_RD;
+	msgs[1].len = len;
+	msgs[1].buf = &data_be_p[4 - len];
+
+	ret = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
+	if (ret != ARRAY_SIZE(msgs))
+		return -EIO;
+
+	*val = be32_to_cpu(data_be);
+
+	return 0;
+}
+
+static int ov9734_get_reso_dist(const struct ov9734_mode *mode,
+				struct v4l2_mbus_framefmt *framefmt)
+{
+	return abs(mode->width - framefmt->width) +
+	       abs(mode->height - framefmt->height);
+}
+
+static const struct ov9734_mode *
+ov9734_find_best_fit(struct ov9734 *ov9734, struct v4l2_subdev_format *fmt)
+{
+	struct v4l2_mbus_framefmt *framefmt = &fmt->format;
+	int dist;
+	int cur_best_fit = 0;
+	int cur_best_fit_dist = -1;
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_SIZE(supported_modes); i++) {
+		dist = ov9734_get_reso_dist(&supported_modes[i], framefmt);
+		if (cur_best_fit_dist == -1 || dist < cur_best_fit_dist) {
+			cur_best_fit_dist = dist;
+			cur_best_fit = i;
+		}
+	}
+
+	return &supported_modes[cur_best_fit];
+}
+
+
+static int ov9734_set_fmt(struct v4l2_subdev *sd,
+			  struct v4l2_subdev_pad_config *cfg,
+			  struct v4l2_subdev_format *fmt)
+{
+	struct ov9734 *ov9734 = to_ov9734(sd);
+	const struct ov9734_mode *mode;
+	s64 h_blank, vblank_def;
+
+
+	mutex_lock(&ov9734->mutex);
+
+	mode = ov9734_find_best_fit(ov9734, fmt);
+	if(camera_id == OV9734_CHIP_ID){
+		fmt->format.code = OV9734_PIX_FORMAT;
+	}else if(camera_id == OH01A10_CHIP_ID){
+		fmt->format.code = OH01A10_PIX_FORMAT;
+	}
+	fmt->format.width = mode->width;
+	fmt->format.height = mode->height;
+	fmt->format.field = V4L2_FIELD_NONE;
+	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+		*v4l2_subdev_get_try_format(sd, cfg, fmt->pad) = fmt->format;
+#else
+		mutex_unlock(&ov9734->mutex);
+		return -ENOTTY;
+#endif
+	} else {
+		//ov9734_change_mode(ov9734, mode);
+		ov9734->cur_mode = mode;
+		h_blank = mode->hts_def - mode->width;
+		__v4l2_ctrl_modify_range(ov9734->hblank, h_blank,
+					 h_blank, 1, h_blank);
+		vblank_def = mode->vts_def - mode->height;
+		__v4l2_ctrl_modify_range(ov9734->vblank, vblank_def,
+					 OV9734_VTS_MAX - mode->height,
+					 1, vblank_def);
+		ov9734->cur_fps = mode->max_fps;
+	}
+
+	mutex_unlock(&ov9734->mutex);
+
+	return 0;
+}
+
+static int ov9734_get_fmt(struct v4l2_subdev *sd,
+			  struct v4l2_subdev_pad_config *cfg,
+			  struct v4l2_subdev_format *fmt)
+{
+	struct ov9734 *ov9734 = to_ov9734(sd);
+	const struct ov9734_mode *mode = ov9734->cur_mode;
+
+	mutex_lock(&ov9734->mutex);
+	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+		fmt->format = *v4l2_subdev_get_try_format(sd, cfg, fmt->pad);
+#else
+		mutex_unlock(&ov9734->mutex);
+		return -ENOTTY;
+#endif
+	} else {
+		fmt->format.width = mode->width;
+		fmt->format.height = mode->height;
+		if(camera_id == OV9734_CHIP_ID){
+			fmt->format.code = OV9734_PIX_FORMAT;
+		}else if(camera_id == OH01A10_CHIP_ID){
+			fmt->format.code = OH01A10_PIX_FORMAT;
+		}
+		fmt->format.field = V4L2_FIELD_NONE;
+
+	}
+	mutex_unlock(&ov9734->mutex);
+
+	return 0;
+}
+
+static int ov9734_enum_mbus_code(struct v4l2_subdev *sd,
+				 struct v4l2_subdev_pad_config *cfg,
+				 struct v4l2_subdev_mbus_code_enum *code)
+{
+#if 0
+	if (code->index >= ARRAY_SIZE(bus_code))
+		return -EINVAL;
+	code->code = bus_code[code->index];
+#else
+	if (code->index > 0){
+		printk("arley_ov9734 ov9734_enum_mbus_code error\n");
+		return -EINVAL;
+	}
+		
+	if(camera_id == OV9734_CHIP_ID){
+		code->code = OV9734_PIX_FORMAT;
+	}else if(camera_id == OH01A10_CHIP_ID){
+		code->code = OH01A10_PIX_FORMAT;
+	}
+	
+#endif
+	return 0;
+}
+
+
+
+static int ov9734_enum_frame_sizes(struct v4l2_subdev *sd,
+				   struct v4l2_subdev_pad_config *cfg,
+				   struct v4l2_subdev_frame_size_enum *fse)
+{
+	if (fse->index >= ARRAY_SIZE(supported_modes))
+		return -EINVAL;
+
+	if (fse->code != OV9734_PIX_FORMAT && fse->code != OH01A10_PIX_FORMAT){
+		printk("arley_ov9734 ov9734_enum_frame_sizes error\n");
+		return -EINVAL;
+	}
+		
+
+	fse->min_width  = supported_modes[fse->index].width;
+	fse->max_width  = supported_modes[fse->index].width;
+	fse->max_height = supported_modes[fse->index].height;
+	fse->min_height = supported_modes[fse->index].height;
+
+	return 0;
+}
+
+
+#if 1
+static int ov9734_test_pattern(struct ov9734 *ov9734, u32 pattern)
+{
+	u32 val;
+
+	if (pattern)
+		val = (pattern - 1) | OV9734_TEST_PATTERN_ENABLE;
+	else
+		val = OV9734_TEST_PATTERN_DISABLE;
+
+	return ov9734_write_reg(ov9734->client, OV9734_REG_TEST_PATTERN, OV9734_REG_VALUE_08BIT, val);
+}
+#endif
+static void ov9734_get_module_inf(struct ov9734 *ov9734,
+				  struct rkmodule_inf *inf)
+{
+	memset(inf, 0, sizeof(*inf));
+	strlcpy(inf->base.sensor, OV9734_NAME, sizeof(inf->base.sensor));
+	strlcpy(inf->base.module, ov9734->module_name,
+		sizeof(inf->base.module));
+	strlcpy(inf->base.lens, ov9734->len_name, sizeof(inf->base.lens));
+}
+
+static long ov9734_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
+{
+	struct ov9734 *ov9734 = to_ov9734(sd);
+	long ret = 0;
+	u32 stream = 0;
+
+	switch (cmd) {
+	case RKMODULE_GET_MODULE_INFO:
+		ov9734_get_module_inf(ov9734, (struct rkmodule_inf *)arg);
+		break;
+	case RKMODULE_SET_QUICK_STREAM:
+
+		stream = *((u32 *)arg);
+
+		if (stream)
+			ov9734_write_reg(ov9734->client, OV9734_REG_CTRL_MODE, OV9734_REG_VALUE_08BIT, OV9734_MODE_STREAMING);
+		else
+			ov9734_write_reg(ov9734->client, OV9734_REG_CTRL_MODE, OV9734_REG_VALUE_08BIT, OV9734_MODE_SW_STANDBY);
+		break;
+	default:
+		ret = -ENOTTY;
+		break;
+	}
+
+	return ret;
+}
+
+#ifdef CONFIG_COMPAT
+static long ov9734_compat_ioctl32(struct v4l2_subdev *sd,
+				  unsigned int cmd, unsigned long arg)
+{
+	void __user *up = compat_ptr(arg);
+	struct rkmodule_inf *inf;
+	struct rkmodule_awb_cfg *cfg;
+	long ret;
+	u32 stream = 0;
+
+	switch (cmd) {
+	case RKMODULE_GET_MODULE_INFO:
+		inf = kzalloc(sizeof(*inf), GFP_KERNEL);
+		if (!inf) {
+			ret = -ENOMEM;
+			return ret;
+		}
+
+		ret = ov9734_ioctl(sd, cmd, inf);
+		if (!ret)
+			ret = copy_to_user(up, inf, sizeof(*inf));
+		kfree(inf);
+		break;
+	case RKMODULE_AWB_CFG:
+		cfg = kzalloc(sizeof(*cfg), GFP_KERNEL);
+		if (!cfg) {
+			ret = -ENOMEM;
+			return ret;
+		}
+
+		ret = copy_from_user(cfg, up, sizeof(*cfg));
+		if (!ret)
+			ret = ov9734_ioctl(sd, cmd, cfg);
+		kfree(cfg);
+		break;
+	case RKMODULE_SET_QUICK_STREAM:
+		ret = copy_from_user(&stream, up, sizeof(u32));
+		if (!ret)
+			ret = ov9734_ioctl(sd, cmd, &stream);
+		break;
+	default:
+		ret = -ENOIOCTLCMD;
+		break;
+	}
+
+	return ret;
+}
+#endif
+
+static int __ov9734_start_stream(struct ov9734 *ov9734)
+{
+	int ret;
+	printk("arley_ov9734 __ov9734_start_stream start\n");
+	if(camera_id == OV9734_CHIP_ID){
+		printk("arley_ov9734 camera_id == OV9734_CHIP_ID\n");
+		ret = ov9734_write_array(ov9734->client, hs_ov9734_1280x720_regs);
+	}else if(camera_id == OH01A10_CHIP_ID){
+		printk("arley_ov9734 camera_id == OH01A10_CHIP_ID\n");
+		ret = ov9734_write_array(ov9734->client, oh01a10_1280x720_regs);
+	}
+	if (ret)
+		return ret;
+
+	/* In case these controls are set before streaming */
+	mutex_unlock(&ov9734->mutex);
+	ret = v4l2_ctrl_handler_setup(&ov9734->ctrl_handler);
+	mutex_lock(&ov9734->mutex);
+	if (ret)
+		return ret;
+
+	return ov9734_write_reg(ov9734->client, OV9734_REG_CTRL_MODE, OV9734_REG_VALUE_08BIT, OV9734_MODE_STREAMING);
+}
+
+static int __ov9734_stop_stream(struct ov9734 *ov9734)
+{
+	return ov9734_write_reg(ov9734->client, OV9734_REG_CTRL_MODE, OV9734_REG_VALUE_08BIT, OV9734_MODE_SW_STANDBY);
+}
+
+static int ov9734_s_stream(struct v4l2_subdev *sd, int on)
+{
+	struct ov9734 *ov9734 = to_ov9734(sd);
+#if OV9734_PM_RUNTIME
+	struct i2c_client *client = ov9734->client;
+#endif
+	int ret = 0;
+
+	mutex_lock(&ov9734->mutex);
+	on = !!on;
+	if (on == ov9734->streaming)
+		goto unlock_and_return;
+
+	if (on) {
+#if OV9734_PM_RUNTIME
+		ret = pm_runtime_get_sync(&client->dev);
+		if (ret < 0) {
+			pm_runtime_put_noidle(&client->dev);
+			goto unlock_and_return;
+		}
+#endif
+		ret = __ov9734_start_stream(ov9734);
+		if (ret) {
+			v4l2_err(sd, "start stream failed while write regs\n");
+#if OV9734_PM_RUNTIME
+			pm_runtime_put(&client->dev);
+#endif
+			goto unlock_and_return;
+		}
+	} else {
+		__ov9734_stop_stream(ov9734);
+#if OV9734_PM_RUNTIME
+		pm_runtime_put(&client->dev);
+#endif
+	}
+
+	ov9734->streaming = on;
+
+unlock_and_return:
+	mutex_unlock(&ov9734->mutex);
+
+	return ret;
+}
+
+static int ov9734_s_power(struct v4l2_subdev *sd, int on)
+{
+	struct ov9734 *ov9734 = to_ov9734(sd);
+	struct i2c_client *client = ov9734->client;
+	int ret = 0;
+
+	dev_info(&client->dev, "arley_ov9734 s_power:%d", on);
+	mutex_lock(&ov9734->mutex);
+
+	if (ov9734->power_on == !!on)
+		goto unlock_and_return;
+
+	if (on) {
+#if OV9734_PM_RUNTIME
+		ret = pm_runtime_get_sync(&client->dev);
+		if (ret < 0) {
+			pm_runtime_put_noidle(&client->dev);
+			goto unlock_and_return;
+		}
+#endif
+		ov9734->power_on = true;
+	} else {
+#if OV9734_PM_RUNTIME
+		pm_runtime_put(&client->dev);
+#endif
+		ov9734->power_on = false;
+	}
+
+unlock_and_return:
+	mutex_unlock(&ov9734->mutex);
+
+	return ret;
+}
+
+static int __ov9734_power_on(struct ov9734 *ov9734)
+{
+	int ret;
+	struct device *dev = &ov9734->client->dev;
+
+	dev_info(dev, "arley_ov9734 power on");
+	if (!IS_ERR_OR_NULL(ov9734->pins_default)) {
+		ret = pinctrl_select_state(ov9734->pinctrl,
+					   ov9734->pins_default);
+		if (ret < 0)
+			dev_err(dev, "could not set pins\n");
+	}
+
+	ret = clk_set_rate(ov9734->xvclk, OV9734_XVCLK_FREQ);
+	if (ret < 0)
+		dev_warn(dev, "Failed to set xvclk rate\n");
+	if (clk_get_rate(ov9734->xvclk) != OV9734_XVCLK_FREQ)
+		dev_warn(dev, "xvclk mismatched\n");
+	ret = clk_prepare_enable(ov9734->xvclk);
+	if (ret < 0) {
+		dev_err(dev, "Failed to enable xvclk\n");
+		goto err_clk;
+	}
+
+	/* At least 20us between Reset and I2C communication */
+	usleep_range(20, 30);
+
+	return 0;
+
+err_clk:
+	clk_disable_unprepare(ov9734->xvclk);
+	return ret;
+}
+
+static void __ov9734_power_off(struct ov9734 *ov9734)
+{
+	struct device *dev = &ov9734->client->dev;
+	dev_info(dev, "arley_ov9734 power off");
+	clk_disable_unprepare(ov9734->xvclk);
+}
+
+static int ov9734_runtime_resume(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct ov9734 *ov9734 = to_ov9734(sd);
+
+	dev_info(&client->dev, "resume");
+	return __ov9734_power_on(ov9734);
+}
+
+static int ov9734_runtime_suspend(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct ov9734 *ov9734 = to_ov9734(sd);
+
+	dev_info(&client->dev, "suspend");
+	__ov9734_power_off(ov9734);
+
+	return 0;
+}
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+static int ov9734_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
+{
+	struct ov9734 *ov9734 = to_ov9734(sd);
+	struct v4l2_mbus_framefmt *try_fmt =
+				v4l2_subdev_get_try_format(sd, fh->pad, 0);
+	const struct ov9734_mode *def_mode = &supported_modes[0];
+
+	mutex_lock(&ov9734->mutex);
+	/* Initialize try_fmt */
+	try_fmt->width = def_mode->width;
+	try_fmt->height = def_mode->height;
+	if(camera_id == OV9734_CHIP_ID){
+		try_fmt->code = OV9734_PIX_FORMAT;
+	}else if(camera_id == OH01A10_CHIP_ID){
+		try_fmt->code = OH01A10_PIX_FORMAT;
+	}
+	try_fmt->field = V4L2_FIELD_NONE;
+
+	mutex_unlock(&ov9734->mutex);
+	/* No crop or compose */
+
+	return 0;
+}
+#endif
+static int ov9734_enum_frame_interval(struct v4l2_subdev *sd,
+	struct v4l2_subdev_pad_config *cfg,
+	struct v4l2_subdev_frame_interval_enum *fie)
+{
+
+	if (fie->index >= ARRAY_SIZE(supported_modes))
+		return -EINVAL;
+
+	if(camera_id == OV9734_CHIP_ID){
+		fie->code = OV9734_PIX_FORMAT;
+	}else if(camera_id == OH01A10_CHIP_ID){
+		fie->code = OH01A10_PIX_FORMAT;
+	}
+	fie->width = supported_modes[fie->index].width;
+	fie->height = supported_modes[fie->index].height;
+	fie->interval = supported_modes[fie->index].max_fps;
+	return 0;
+}
+
+
+static int ov9734_g_frame_interval(struct v4l2_subdev *sd,
+				   struct v4l2_subdev_frame_interval *fi)
+{
+	struct ov9734 *ov9734 = to_ov9734(sd);
+	const struct ov9734_mode *mode = ov9734->cur_mode;
+
+	if (ov9734->streaming)
+		fi->interval = ov9734->cur_fps;
+	else
+		fi->interval = mode->max_fps;
+
+
+	return 0;
+}
+
+static const struct ov9734_mode *ov9734_find_mode(struct ov9734 *ov9734, int fps)
+{
+	const struct ov9734_mode *mode = NULL;
+	const struct ov9734_mode *match = NULL;
+	int cur_fps = 0;
+	int i = 0;
+	printk("arley_ov9734 ov9734_find_mode\n");
+	for (i = 0; i < ARRAY_SIZE(supported_modes); i++) {
+		mode = &supported_modes[i];
+		if (mode->width == ov9734->cur_mode->width &&
+		    mode->height == ov9734->cur_mode->height) {
+			printk("arley_ov9734 ov9734_find_mode 001\n");
+			cur_fps = DIV_ROUND_CLOSEST(mode->max_fps.denominator, mode->max_fps.numerator);
+			if (cur_fps == fps) {
+				match = mode;
+				break;
+			}
+		}
+	}
+	return match;
+}
+
+static int ov9734_s_frame_interval(struct v4l2_subdev *sd, struct v4l2_subdev_frame_interval *fi)
+{
+	struct ov9734 *ov9734 = to_ov9734(sd);
+	const struct ov9734_mode *mode = NULL;
+	struct v4l2_fract *fract = &fi->interval;
+	s64 h_blank, vblank_def;
+	int fps;
+
+	if (ov9734->streaming)
+		return -EBUSY;
+
+	if (fi->pad != 0)
+		return -EINVAL;
+
+	if (fract->numerator == 0) {
+		v4l2_err(sd, "error param, check interval param\n");
+		return -EINVAL;
+	}
+	fps = DIV_ROUND_CLOSEST(fract->denominator, fract->numerator);
+	mode = ov9734_find_mode(ov9734, fps);
+	if (mode == NULL) {
+		v4l2_err(sd, "couldn't match fi\n");
+		return -EINVAL;
+	}
+
+	ov9734->cur_mode = mode;
+
+	h_blank = mode->hts_def - mode->width;
+	__v4l2_ctrl_modify_range(ov9734->hblank, h_blank,
+				 h_blank, 1, h_blank);
+	vblank_def = mode->vts_def - mode->height;
+	__v4l2_ctrl_modify_range(ov9734->vblank, vblank_def,
+				 OV9734_VTS_MAX - mode->height,
+				 1, vblank_def);
+	ov9734->cur_fps = mode->max_fps;
+	return 0;
+}
+
+static int ov9734_g_mbus_config(struct v4l2_subdev *sd, unsigned int pad, struct v4l2_mbus_config *config)
+{
+	u32 val = 0;
+
+	val = 1 << (OV9734_LANES - 1) |
+	      V4L2_MBUS_CSI2_CHANNEL_0 |
+	      V4L2_MBUS_CSI2_CONTINUOUS_CLOCK;
+	config->type = V4L2_MBUS_CSI2_DPHY;
+	config->flags = val;
+
+	return 0;
+}
+
+static const struct dev_pm_ops ov9734_pm_ops = {
+	SET_RUNTIME_PM_OPS(ov9734_runtime_suspend,
+			   ov9734_runtime_resume, NULL)
+};
+
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+static const struct v4l2_subdev_internal_ops ov9734_internal_ops = {
+	.open = ov9734_open,
+};
+#endif
+
+static const struct v4l2_subdev_core_ops ov9734_core_ops = {
+	.s_power = ov9734_s_power,
+	.ioctl = ov9734_ioctl,
+#ifdef CONFIG_COMPAT
+	.compat_ioctl32 = ov9734_compat_ioctl32,
+#endif
+};
+
+static const struct v4l2_subdev_video_ops ov9734_video_ops = {
+	.s_stream = ov9734_s_stream,
+	.g_frame_interval = ov9734_g_frame_interval,
+	.s_frame_interval = ov9734_s_frame_interval,
+};
+
+static const struct v4l2_subdev_pad_ops ov9734_pad_ops = {
+	.enum_mbus_code = ov9734_enum_mbus_code,
+	.enum_frame_size = ov9734_enum_frame_sizes,
+	.enum_frame_interval = ov9734_enum_frame_interval,
+	.get_fmt = ov9734_get_fmt,
+	.set_fmt = ov9734_set_fmt,
+	.get_mbus_config = ov9734_g_mbus_config,
+};
+
+static const struct v4l2_subdev_ops ov9734_subdev_ops = {
+	.core	= &ov9734_core_ops,
+	.video	= &ov9734_video_ops,
+	.pad	= &ov9734_pad_ops,
+};
+#if 1
+static int ov9734_set_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct ov9734 *ov9734 = container_of(ctrl->handler,
+					     struct ov9734, ctrl_handler);
+	struct i2c_client *client = ov9734->client;
+	s64 max;
+	int ret = 0;
+
+	/* Propagate change of current control to all related controls */
+	switch (ctrl->id) {
+	case V4L2_CID_VBLANK:
+			/* Update max exposure while meeting expected vblanking */
+			max = ov9734->cur_mode->height + ctrl->val - OV9734_EXPOSURE_MAX_MARGIN;
+			__v4l2_ctrl_modify_range(ov9734->exposure,
+					 ov9734->exposure->minimum, max,
+					 ov9734->exposure->step,
+					 ov9734->exposure->default_value);
+		break;
+	}
+#if OV9734_PM_RUNTIME
+	if (!pm_runtime_get_if_in_use(&client->dev))
+		return 0;
+#endif
+	switch (ctrl->id) {
+	case V4L2_CID_EXPOSURE:
+		/* 4 least significant bits of expsoure are fractional part */
+		ret = ov9734_write_reg(ov9734->client, OV9734_REG_EXPOSURE, OV9734_REG_VALUE_24BIT, ctrl->val << 4);
+		dev_dbg(&client->dev, "set exposure %d\n", ctrl->val);
+		break;
+	case V4L2_CID_ANALOGUE_GAIN:
+		if(camera_id == OV9734_CHIP_ID){
+			ret = ov9734_write_reg(ov9734->client, OV9734_REG_ANALOG_GAIN, OV9734_REG_VALUE_16BIT, ctrl->val);
+		}else if(camera_id == OH01A10_CHIP_ID){
+			ret = ov9734_write_reg(ov9734->client, OH01A10_REG_ANALOG_GAIN, OV9734_REG_VALUE_16BIT, ctrl->val << 4);
+		}
+		dev_dbg(&client->dev, "set analog gain 0x%x\n", ctrl->val);
+		break;
+	case V4L2_CID_VBLANK:
+		ret = ov9734_write_reg(ov9734->client, OV9734_REG_VTS, OV9734_REG_VALUE_16BIT, ctrl->val + ov9734->cur_mode->height);
+		break;
+	case V4L2_CID_TEST_PATTERN:
+		ret = ov9734_test_pattern(ov9734, ctrl->val);
+		break;
+	default:
+		dev_warn(&client->dev, "%s Unhandled id:0x%x, val:0x%x\n",
+			 __func__, ctrl->id, ctrl->val);
+		break;
+	}
+#if OV9734_PM_RUNTIME
+	pm_runtime_put(&client->dev);
+#endif
+	return ret;
+}
+#endif
+
+static const struct v4l2_ctrl_ops ov9734_ctrl_ops = {
+	.s_ctrl = ov9734_set_ctrl,
+};
+
+static int ov9734_initialize_controls(struct ov9734 *ov9734)
+{
+	const struct ov9734_mode *mode;
+	struct v4l2_ctrl_handler *handler;
+	struct v4l2_ctrl *ctrl;
+	s64 exposure_max, vblank_def;
+	u32 h_blank;
+	int ret;
+
+	handler = &ov9734->ctrl_handler;
+	mode = ov9734->cur_mode;
+	ret = v4l2_ctrl_handler_init(handler, 8);
+	if (ret)
+		return ret;
+	handler->lock = &ov9734->mutex;
+
+	ctrl= v4l2_ctrl_new_int_menu(handler, NULL, V4L2_CID_LINK_FREQ, 0, 0, link_freq_items);
+	if (ctrl)
+		ctrl->flags |= V4L2_CTRL_FLAG_READ_ONLY;
+
+	/* pixel rate = link frequency * 2 * lanes / BITS_PER_SAMPLE */
+
+	v4l2_ctrl_new_std(handler, NULL, V4L2_CID_PIXEL_RATE, 0, OV9734_PIXEL_RATE, 1, OV9734_PIXEL_RATE);
+
+	h_blank = mode->hts_def - mode->width;
+	ov9734->hblank = v4l2_ctrl_new_std(handler, NULL, V4L2_CID_HBLANK,
+				h_blank, h_blank, 1, h_blank);
+	if (ov9734->hblank)
+		ov9734->hblank->flags |= V4L2_CTRL_FLAG_READ_ONLY;
+
+	vblank_def = mode->vts_def - mode->height;
+	ov9734->vblank = v4l2_ctrl_new_std(handler, &ov9734_ctrl_ops,
+				V4L2_CID_VBLANK, vblank_def,
+				OV9734_VTS_MAX - mode->height,
+				1, vblank_def);
+
+
+	exposure_max = ov9734->cur_mode->vts_def - OV9734_EXPOSURE_MAX_MARGIN;
+	ov9734->exposure = v4l2_ctrl_new_std(handler, &ov9734_ctrl_ops, V4L2_CID_EXPOSURE, OV9734_EXPOSURE_MIN, exposure_max, OV9734_EXPOSURE_STEP, exposure_max);
+
+	ov9734->anal_gain = v4l2_ctrl_new_std(handler, &ov9734_ctrl_ops, V4L2_CID_ANALOGUE_GAIN,
+			  OV9734_ANAL_GAIN_MIN, OV9734_ANAL_GAIN_MAX,
+			  OV9734_ANAL_GAIN_STEP, OV9734_ANAL_GAIN_MIN);
+
+	v4l2_ctrl_new_std_menu_items(handler, &ov9734_ctrl_ops,
+				     V4L2_CID_TEST_PATTERN,
+				     ARRAY_SIZE(ov9734_test_pattern_menu) - 1,
+				     0, 0, ov9734_test_pattern_menu);
+
+	if (handler->error) {
+		ret = handler->error;
+		dev_err(&ov9734->client->dev,
+			"Failed to init controls(%d)\n", ret);
+		goto err_free_handler;
+	}
+
+	ov9734->subdev.ctrl_handler = handler;
+
+	return 0;
+
+err_free_handler:
+	v4l2_ctrl_handler_free(handler);
+
+	return ret;
+}
+
+static void update_ov9734_register(u8 value) {
+	int i;
+    for (i = 0; i < ARRAY_SIZE(oh01a10_1280x720_regs); i++) {
+        if (oh01a10_1280x720_regs[i].addr == 0x4885) {
+            oh01a10_1280x720_regs[i].val = value;
+            break;
+        }
+    }
+}
+
+static ssize_t ov9734_device_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+	u8 value;
+	if (sscanf(buf, "0x%hhx", &value) != 1) {
+		printk("arley_ov9734 reg_write_store get buf failed\n");
+        return -EINVAL;
+    }
+	update_ov9734_register(value);
+	return count;
+}
+static ssize_t ov9734_device_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "0x%x\n", camera_id);
+}
+static DEVICE_ATTR(ov9734_device,  S_IRUGO | S_IWUSR, ov9734_device_show, ov9734_device_store);
+
+static int ov9734_check_sensor_id(struct ov9734 *ov9734,
+				  struct i2c_client *client)
+{
+	struct device *dev = &ov9734->client->dev;
+	//u32 id = 0;
+	int ret;
+
+	ret = ov9734_read_reg(client, OV9734_REG_CHIP_ID,
+			      OV9734_REG_VALUE_16BIT, &camera_id);
+	if (camera_id != OV9734_CHIP_ID && camera_id != OH01A10_CHIP_ID) {
+		dev_err(dev, "Unexpected sensor camera_id(%06x), ret(%d)\n", camera_id, ret);
+		return -ENODEV;
+	}
+	if(camera_id == OV9734_CHIP_ID){
+		dev_info(dev, "Detected ov9734 camera_id %06x\n", OV9734_CHIP_ID);
+	}else if(camera_id == OH01A10_CHIP_ID){
+		dev_info(dev, "Detected ov9734 camera_id %06x\n", OH01A10_CHIP_ID);
+	}
+	
+	return 0;
+}
+
+static int ov9734_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	struct device *dev = &client->dev;
+	struct device_node *node = dev->of_node;
+	struct ov9734 *ov9734;
+	struct v4l2_subdev *sd;
+	char facing[2];
+	int ret;
+	
+	//msleep(2 * 1000);
+	dev_info(dev, "driver version: %02x.%02x.%02x",
+		DRIVER_VERSION >> 16,
+		(DRIVER_VERSION & 0xff00) >> 8,
+		DRIVER_VERSION & 0x00ff);
+
+	ov9734 = devm_kzalloc(dev, sizeof(*ov9734), GFP_KERNEL);
+	if (!ov9734)
+		return -ENOMEM;
+#if 0
+	ret = of_property_read_u32(node, RKMODULE_CAMERA_MODULE_INDEX,
+				   &ov9734->module_index);
+	ret |= of_property_read_string(node, RKMODULE_CAMERA_MODULE_FACING,
+				       &ov9734->module_facing);
+	ret |= of_property_read_string(node, RKMODULE_CAMERA_MODULE_NAME,
+				       &ov9734->module_name);
+	ret |= of_property_read_string(node, RKMODULE_CAMERA_LENS_NAME,
+				       &ov9734->len_name);
+	if (ret) {
+		dev_err(dev, "could not get module information!\n");
+		return -EINVAL;
+	}
+#endif
+	ov9734->client = client;
+	ov9734->cur_mode = &supported_modes[0];
+
+	ov9734->xvclk = devm_clk_get(dev, "xvclk");
+	if (IS_ERR(ov9734->xvclk)) {
+		dev_err(dev, "Failed to get xvclk\n");
+		return -EINVAL;
+	}
+	
+	ov9734->pinctrl = devm_pinctrl_get(dev);
+	if (!IS_ERR(ov9734->pinctrl)) {
+		ov9734->pins_default =
+			pinctrl_lookup_state(ov9734->pinctrl,
+					     OF_CAMERA_PINCTRL_STATE_DEFAULT);
+		if (IS_ERR(ov9734->pins_default))
+			dev_info(dev, "could not get default pinstate\n");
+	} else {
+		dev_info(dev, "no pinctrl\n");
+	}
+
+	mutex_init(&ov9734->mutex);
+
+	sd = &ov9734->subdev;
+	v4l2_i2c_subdev_init(sd, client, &ov9734_subdev_ops);
+	ret = ov9734_initialize_controls(ov9734);
+	if (ret)
+		goto err_destroy_mutex;
+
+	ret = __ov9734_power_on(ov9734);
+	if (ret)
+		goto err_free_handler;
+
+	ret = ov9734_check_sensor_id(ov9734, client);
+	if (ret){
+		printk("arley_ov9734 check ov9734 id error\n");
+		goto err_power_off;		
+	}
+	
+	ret = of_property_read_u32(node, RKMODULE_CAMERA_MODULE_INDEX, &ov9734->module_index);
+	if(camera_id == OV9734_CHIP_ID){
+		//ret = of_property_read_u32(node, RKMODULE_CAMERA_MODULE_INDEX, &ov9734->module_index);
+		ret |= of_property_read_string(node, RKMODULE_CAMERA_MODULE_FACING,
+				       &ov9734->module_facing);
+		ret |= of_property_read_string(node, RKMODULE_CAMERA_MODULE_NAME,
+				       &ov9734->module_name);
+		ret |= of_property_read_string(node, RKMODULE_CAMERA_LENS_NAME,
+				       &ov9734->len_name);
+	
+	}else if(camera_id == OH01A10_CHIP_ID){
+		//ret = of_property_read_u32(node, RKMODULE_CAMERA_MODULE_INDEX_OH01A10, &ov9734->module_index);
+		ret |= of_property_read_string(node, RKMODULE_CAMERA_MODULE_FACING_OH01A10,
+				       &ov9734->module_facing);
+		ret |= of_property_read_string(node, RKMODULE_CAMERA_MODULE_NAME_OH01A10,
+				       &ov9734->module_name);
+		ret |= of_property_read_string(node, RKMODULE_CAMERA_LENS_NAME_OH01A10,
+				       &ov9734->len_name);
+	}	
+	if (ret) {
+		dev_err(dev, "could not get module information!\n");
+		goto err_power_off;	
+	}		
+#ifdef CONFIG_VIDEO_V4L2_SUBDEV_API
+	sd->internal_ops = &ov9734_internal_ops;
+	sd->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE |
+		     V4L2_SUBDEV_FL_HAS_EVENTS;
+#endif
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	ov9734->pad.flags = MEDIA_PAD_FL_SOURCE;
+	sd->entity.function = MEDIA_ENT_F_CAM_SENSOR;
+	ret = media_entity_pads_init(&sd->entity, 1, &ov9734->pad);
+	if (ret < 0)
+		goto err_power_off;
+#endif
+
+	memset(facing, 0, sizeof(facing));
+	if (strcmp(ov9734->module_facing, "back") == 0)
+		facing[0] = 'b';
+	else
+		facing[0] = 'f';
+
+	snprintf(sd->name, sizeof(sd->name), "m%02d_%s_%s %s",
+		 ov9734->module_index, facing,
+		 OV9734_NAME, dev_name(sd->dev));
+	ret = v4l2_async_register_subdev_sensor_common(sd);
+	if (ret) {
+		dev_err(dev, "v4l2 async register subdev failed\n");
+		goto err_clean_entity;
+	}
+	
+	//i2c_set_clientdata(client, ov9734);	
+	ret = device_create_file(dev, &dev_attr_ov9734_device);
+    if(ret){
+		 printk("arley_ov9734 device_create_file ov9734 error\n");
+		 device_destroy(dev->class, dev->devt);
+	}else{
+		printk("arley_ov9734 device_create_file ov9734 success\n");
+
+	}	
+	
+#if OV9734_PM_RUNTIME
+	pm_runtime_set_active(dev);
+	pm_runtime_enable(dev);
+	pm_runtime_idle(dev);
+#endif	
+
+	dev_err(dev, "arley_ov9734 v4l2 async register subdev ov9734 sucessfully\n");
+	return 0;
+
+err_clean_entity:
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	media_entity_cleanup(&sd->entity);
+#endif
+err_power_off:
+	__ov9734_power_off(ov9734);
+err_free_handler:
+	v4l2_ctrl_handler_free(&ov9734->ctrl_handler);
+err_destroy_mutex:
+	mutex_destroy(&ov9734->mutex);
+
+	return ret;
+}
+
+static int ov9734_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct ov9734 *ov9734 = to_ov9734(sd);
+
+	//删除设备文件
+	device_remove_file(&client->dev, &dev_attr_ov9734_device);
+	
+	v4l2_async_unregister_subdev(sd);
+#if defined(CONFIG_MEDIA_CONTROLLER)
+	media_entity_cleanup(&sd->entity);
+#endif
+	v4l2_ctrl_handler_free(&ov9734->ctrl_handler);
+	mutex_destroy(&ov9734->mutex);
+#if OV9734_PM_RUNTIME
+	pm_runtime_disable(&client->dev);
+	if (!pm_runtime_status_suspended(&client->dev))
+		__ov9734_power_off(ov9734);
+	pm_runtime_set_suspended(&client->dev);
+#endif
+	return 0;
+}
+
+#if IS_ENABLED(CONFIG_OF)
+static const struct of_device_id ov9734_of_match[] = {
+	{ .compatible = "ovti,ov9734" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, ov9734_of_match);
+#endif
+
+static const struct i2c_device_id ov9734_match_id[] = {
+	{ "ovti,ov9734", 0 },
+	{ },
+};
+
+static struct i2c_driver ov9734_i2c_driver = {
+	.driver = {
+		.name = OV9734_NAME,
+		.pm = &ov9734_pm_ops,
+		.of_match_table = of_match_ptr(ov9734_of_match),
+	},
+	.probe		= &ov9734_probe,
+	.remove		= &ov9734_remove,
+	.id_table	= ov9734_match_id,
+};
+
+static int __init sensor_mod_init(void)
+{
+	return i2c_add_driver(&ov9734_i2c_driver);
+}
+
+static void __exit sensor_mod_exit(void)
+{
+	i2c_del_driver(&ov9734_i2c_driver);
+}
+
+device_initcall_sync(sensor_mod_init);
+module_exit(sensor_mod_exit);
+
+MODULE_DESCRIPTION("OmniVision ov9734 sensor driver");
+MODULE_LICENSE("GPL v2");
-- 
2.34.1

